#pragma kernel CSMain

RWTexture2D<float4> butterfly;

RWTexture2D<float4> pingPongIn;
RWTexture2D<float4> pingPongIn1;
RWTexture2D<float4> pingPongIn2;

RWTexture2D<float4> pingPongOut;
RWTexture2D<float4> pingPongOut1;
RWTexture2D<float4> pingPongOut2;

int stage;
int pingPong;
int direction;

float2 ComplexMultiply(float2 a, float2 b);
float2 ComplexAdd(float2 a, float2 b);
void VerticalButterfly(int2 id);
void HorizontalButterfly(int2 id);

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(direction == 0)
        HorizontalButterfly(id.xy);
    else if(direction == 1)
        VerticalButterfly(id.xy);
}

void VerticalButterfly(int2 id)
{
    float2 h;
    float2 h20;
    
    float2 h1;
    float2 h22;
    
    float2 h2;
    float2 h23;

    const float4 butterflyData = butterfly[uint2(stage, id.y)].rgba;
    const float2 twiddleFactor = butterflyData.xy;
    
    if(pingPong == 0)
    {
        const float4 topInputs = pingPongIn[uint2(id.x, butterflyData.z)].rgba;
        const float4 bottomInputs = pingPongIn[uint2(id.x, butterflyData.w)].rgba;

        const float4 topInputs1 = pingPongIn1[uint2(id.x, butterflyData.z)].rgba;
        const float4 bottomInputs1 = pingPongIn1[uint2(id.x, butterflyData.w)].rgba;

        const float4 topInputs2 = pingPongIn2[uint2(id.x, butterflyData.z)].rgba;
        const float4 bottomInputs2 = pingPongIn2[uint2(id.x, butterflyData.w)].rgba;
        
        const float2 topInput = topInputs.xy;
        const float2 bottomInput = bottomInputs.xy;
        const float2 topInput20 = topInputs.zw;
        const float2 bottomInput20 = bottomInputs.zw;

        const float2 topInput1 = topInputs1.xy;
        const float2 bottomInput1 = bottomInputs1.xy;
        const float2 topInput21 = topInputs1.zw;
        const float2 bottomInput21 = bottomInputs1.zw;

        const float2 topInput2 = topInputs2.xy;
        const float2 bottomInput2 = bottomInputs2.xy;
        const float2 topInput22 = topInputs2.zw;
        const float2 bottomInput22 = bottomInputs2.zw;

        h = ComplexAdd(topInput, ComplexMultiply(twiddleFactor, bottomInput));
        h20 = ComplexAdd(topInput20, ComplexMultiply(twiddleFactor, bottomInput20));

        h1 = ComplexAdd(topInput1, ComplexMultiply(twiddleFactor, bottomInput1));
        h22 = ComplexAdd(topInput21, ComplexMultiply(twiddleFactor, bottomInput21));

        h2 = ComplexAdd(topInput2, ComplexMultiply(twiddleFactor, bottomInput2));
        h23 = ComplexAdd(topInput22, ComplexMultiply(twiddleFactor, bottomInput22));
        
        pingPongOut[id.xy] = float4(h.x, h.y, h20.x, h20.y);
        pingPongOut1[id.xy] = float4(h1.x, h1.y, h22.x, h22.y);
        pingPongOut2[id.xy] = float4(h2.x, h2.y, h23.x, h23.y);
    }
    else if(pingPong == 1)
    {
        const float4 topInputs = pingPongOut[uint2(id.x, butterflyData.z)].rgba;
        const float4 bottomInputs = pingPongOut[uint2(id.x, butterflyData.w)].rgba;

        const float4 topInputs1 = pingPongOut1[uint2(id.x, butterflyData.z)].rgba;
        const float4 bottomInputs1 = pingPongOut1[uint2(id.x, butterflyData.w)].rgba;

        const float4 topInputs2 = pingPongOut2[uint2(id.x, butterflyData.z)].rgba;
        const float4 bottomInputs2 = pingPongOut2[uint2(id.x, butterflyData.w)].rgba;
        
        const float2 topInput = topInputs.xy;
        const float2 bottomInput = bottomInputs.xy;
        const float2 topInput20 = topInputs.zw;
        const float2 bottomInput20 = bottomInputs.zw;

        const float2 topInput1 = topInputs1.xy;
        const float2 bottomInput1 = bottomInputs1.xy;
        const float2 topInput21 = topInputs1.zw;
        const float2 bottomInput21 = bottomInputs1.zw;

        const float2 topInput2 = topInputs2.xy;
        const float2 bottomInput2 = bottomInputs2.xy;
        const float2 topInput22 = topInputs2.zw;
        const float2 bottomInput22 = bottomInputs2.zw;

        h = ComplexAdd(topInput, ComplexMultiply(twiddleFactor, bottomInput));
        h20 = ComplexAdd(topInput20, ComplexMultiply(twiddleFactor, bottomInput20));

        h1 = ComplexAdd(topInput1, ComplexMultiply(twiddleFactor, bottomInput1));
        h22 = ComplexAdd(topInput21, ComplexMultiply(twiddleFactor, bottomInput21));

        h2 = ComplexAdd(topInput2, ComplexMultiply(twiddleFactor, bottomInput2));
        h23 = ComplexAdd(topInput22, ComplexMultiply(twiddleFactor, bottomInput22));
        
        pingPongIn[id.xy] = float4(h.x, h.y, h20.x, h20.y);
        pingPongIn1[id.xy] = float4(h1.x, h1.y, h22.x, h22.y);
        pingPongIn2[id.xy] = float4(h2.x, h2.y, h23.x, h23.y);
    }
}

void HorizontalButterfly(int2 id)
{
    float2 h;
    float2 h20;
    
    float2 h1;
    float2 h22;
    
    float2 h2;
    float2 h23;

    const float4 butterflyData = butterfly[uint2(stage, id.x)].rgba;
    const float2 twiddleFactor = butterflyData.xy;
    
    if(pingPong == 0)
    {
        const float4 topInputs = pingPongIn[uint2(butterflyData.z, id.y)].rgba;
        const float4 bottomInputs = pingPongIn[uint2(butterflyData.w, id.y)].rgba;

        const float4 topInputs1 = pingPongIn1[uint2(butterflyData.z, id.y)].rgba;
        const float4 bottomInputs1 = pingPongIn1[uint2(butterflyData.w, id.y)].rgba;

        const float4 topInputs2 = pingPongIn2[uint2(butterflyData.z, id.y)].rgba;
        const float4 bottomInputs2 = pingPongIn2[uint2(butterflyData.w, id.y)].rgba;
        
        const float2 topInput = topInputs.xy;
        const float2 bottomInput = bottomInputs.xy;
        const float2 topInput20 = topInputs.zw;
        const float2 bottomInput20 = bottomInputs.zw;

        const float2 topInput1 = topInputs1.xy;
        const float2 bottomInput1 = bottomInputs1.xy;
        const float2 topInput21 = topInputs1.zw;
        const float2 bottomInput21 = bottomInputs1.zw;

        const float2 topInput2 = topInputs2.xy;
        const float2 bottomInput2 = bottomInputs2.xy;
        const float2 topInput22 = topInputs2.zw;
        const float2 bottomInput22 = bottomInputs2.zw;
        
        h = ComplexAdd(topInput, ComplexMultiply(twiddleFactor, bottomInput));
        h20 = ComplexAdd(topInput20, ComplexMultiply(twiddleFactor, bottomInput20));

        h1 = ComplexAdd(topInput1, ComplexMultiply(twiddleFactor, bottomInput1));
        h22 = ComplexAdd(topInput21, ComplexMultiply(twiddleFactor, bottomInput21));

        h2 = ComplexAdd(topInput2, ComplexMultiply(twiddleFactor, bottomInput2));
        h23 = ComplexAdd(topInput22, ComplexMultiply(twiddleFactor, bottomInput22));
        
        pingPongOut[id.xy] = float4(h.x, h.y, h20.x, h20.y);
        pingPongOut1[id.xy] = float4(h1.x, h1.y, h22.x, h22.y);
        pingPongOut2[id.xy] = float4(h2.x, h2.y, h23.x, h23.y);
    }
    else if(pingPong == 1)
    {
        const float4 topInputs = pingPongOut[uint2(butterflyData.z, id.y)].rgba;
        const float4 bottomInputs = pingPongOut[uint2(butterflyData.w, id.y)].rgba;

        const float4 topInputs1 = pingPongOut1[uint2(butterflyData.z, id.y)].rgba;
        const float4 bottomInputs1 = pingPongOut1[uint2(butterflyData.w, id.y)].rgba;

        const float4 topInputs2 = pingPongOut2[uint2(butterflyData.z, id.y)].rgba;
        const float4 bottomInputs2 = pingPongOut2[uint2(butterflyData.w, id.y)].rgba;
        
        const float2 topInput = topInputs.xy;
        const float2 bottomInput = bottomInputs.xy;
        const float2 topInput20 = topInputs.zw;
        const float2 bottomInput20 = bottomInputs.zw;

        const float2 topInput1 = topInputs1.xy;
        const float2 bottomInput1 = bottomInputs1.xy;
        const float2 topInput21 = topInputs1.zw;
        const float2 bottomInput21 = bottomInputs1.zw;

        const float2 topInput2 = topInputs2.xy;
        const float2 bottomInput2 = bottomInputs2.xy;
        const float2 topInput22 = topInputs2.zw;
        const float2 bottomInput22 = bottomInputs2.zw;
        
        h = ComplexAdd(topInput, ComplexMultiply(twiddleFactor, bottomInput));
        h20 = ComplexAdd(topInput20, ComplexMultiply(twiddleFactor, bottomInput20));

        h1 = ComplexAdd(topInput1, ComplexMultiply(twiddleFactor, bottomInput1));
        h22 = ComplexAdd(topInput21, ComplexMultiply(twiddleFactor, bottomInput21));

        h2 = ComplexAdd(topInput2, ComplexMultiply(twiddleFactor, bottomInput2));
        h23 = ComplexAdd(topInput22, ComplexMultiply(twiddleFactor, bottomInput22));
        
        pingPongIn[id.xy] = float4(h.x, h.y, h20.x, h20.y);
        pingPongIn1[id.xy] = float4(h1.x, h1.y, h22.x, h22.y);
        pingPongIn2[id.xy] = float4(h2.x, h2.y, h23.x, h23.y);
    }
}

float2 ComplexMultiply(float2 a, float2 b)
{
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float2 ComplexAdd(float2 a, float2 b)
{
    return float2(a.x + b.x, a.y + b.y);
}
